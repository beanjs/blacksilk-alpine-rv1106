	.arch armv7-a
	.eabi_attribute 20, 1
	.eabi_attribute 21, 1
	.eabi_attribute 23, 3
	.eabi_attribute 24, 1
	.eabi_attribute 25, 1
	.eabi_attribute 26, 2
	.eabi_attribute 30, 4
	.eabi_attribute 34, 1
	.eabi_attribute 18, 2
	.file	"mpp_vcodec_chan.c"
	.text
	.syntax unified
	.syntax unified
	.thumb
	.syntax unified
	.align	1
	.global	mpp_vcodec_schedule
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpp_vcodec_schedule, %function
mpp_vcodec_schedule:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movs	r0, #0
	bx	lr
	.fnend
	.size	mpp_vcodec_schedule, .-mpp_vcodec_schedule
	.align	1
	.global	mpp_vcodec_chan_create
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpp_vcodec_chan_create, %function
mpp_vcodec_chan_create:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	ldrd	r4, r10, [r0]
	.pad #60
	sub	sp, sp, #60
	ldr	r7, [r0, #8]
	ldrd	r8, fp, [r0, #12]
	mov	r1, r4
	mov	r0, r7
	bl	mpp_vcodec_get_chan_entry
	mov	r6, r0
	mov	r0, r4
	bl	mpp_vcodec_get_chan_num
	movs	r1, #45
	mov	r2, r0
	ldr	r0, .L16
	bl	printk
	ldr	r3, [r6]
	cmp	r3, r7
	beq	.L3
	movs	r1, #46
	ldr	r3, .L16+4
	str	r1, [sp]
	ldr	r2, .L16+8
	ldr	r0, .L16+12
	bl	printk
.L3:
	ldr	r2, [r6, #44]
	ldr	r3, [r5, #48]
	cmp	r2, #0
	beq	.L4
	cmp	r3, #0
	bne	.L13
	mov	r0, r4
	bl	mpp_vcodec_get_free_chan
	subs	r7, r0, #0
	bge	.L6
.L15:
	mov	r4, #-1
.L2:
	mov	r0, r4
	add	sp, sp, #60
	@ sp needed
	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
.L6:
	mov	r3, r7
	ldr	r2, [r5, #8]
	movs	r1, #57
	ldr	r0, .L16+16
	bl	printk
	str	r7, [r5, #8]
	mov	r1, r4
	mov	r0, r7
	bl	mpp_vcodec_get_chan_entry
	mov	r6, r0
.L7:
	mov	r9, #0
	cmp	r4, #0
	beq	.L2
	cmp	r4, #1
	bne	.L9
	ldr	r3, [r5, #20]
	add	r2, r6, #140
	strd	r9, r10, [sp, #12]
	strd	r8, fp, [sp, #20]
	str	r3, [sp, #28]
	ldr	r3, [r5, #24]
	str	r2, [sp, #40]
	str	r3, [sp, #32]
	ldr	r3, [r5, #28]
	str	r3, [sp, #36]
	cbnz	r3, .L10
	ldr	r4, [r5, #44]
.L10:
	ldr	r3, [r5, #56]
	add	r1, sp, #16
	add	r0, sp, #12
	strd	r4, r7, [sp, #44]
	str	r3, [sp, #52]
	bl	mpp_enc_init
	cmp	r0, #0
	bne	.L13
	mov	r2, r7
	ldr	r1, .L16+20
	ldr	r0, [sp, #12]
	bl	mpp_enc_register_chl
	mov	r2, r10
	movs	r1, #1
	mov	r0, r6
	ldr	r3, [sp, #12]
	bl	mpp_vcodec_chan_entry_init
	mov	r1, r5
	mov	r0, r6
	bl	mpp_vcodec_chan_setup_hal_bufs
	mov	r4, r0
	cbz	r0, .L12
	ldr	r0, [r6, #44]
	bl	mpp_enc_deinit
	mov	r0, r6
	bl	mpp_vcodec_chan_entry_deinit
	b	.L15
.L4:
	cmp	r3, #0
	beq	.L7
	b	.L15
.L12:
	movs	r0, #1
	bl	mpp_vcodec_inc_chan_num
	strb	r8, [r6, #21]
	bl	mpp_time
	strd	r0, [r6, #96]
	bl	mpp_time
	strd	r0, [r6, #104]
	bl	mpp_time
	mov	r2, r7
	strd	r0, [r6, #112]
	movs	r1, #103
	str	r8, [sp]
	ldr	r0, .L16+24
	ldr	r3, [r6, #44]
	bl	printk
	b	.L2
.L9:
	mov	r2, r4
	movs	r1, #106
	ldr	r0, .L16+28
	bl	printk
.L13:
	movs	r4, #0
	b	.L2
.L17:
	.align	2
.L16:
	.word	.LC0
	.word	.LANCHOR0
	.word	.LC1
	.word	.LC2
	.word	.LC3
	.word	mpp_vcodec_enc_int_handle
	.word	.LC4
	.word	.LC5
	.fnend
	.size	mpp_vcodec_chan_create, .-mpp_vcodec_chan_create
	.align	1
	.global	mpp_vcodec_chan_unbind
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpp_vcodec_chan_unbind, %function
mpp_vcodec_chan_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r4, r5, lr}
	.save {r4, r5, lr}
	.pad #12
	mov	r4, r0
	ldr	r0, [r0, #4]
	adds	r1, r0, #1
	bne	.L19
	ldr	r0, [r4, #8]
	adds	r2, r0, #1
	beq	.L20
.L19:
	movs	r1, #1
	bl	mpp_vcodec_get_chan_entry
	mov	r5, r0
	cbnz	r0, .L21
	movs	r1, #125
	ldr	r3, .L26
	str	r1, [sp]
	ldr	r2, .L26+4
	ldr	r0, .L26+8
	bl	printk
.L21:
	ldr	r2, [r4, #4]
	adds	r3, r2, #1
	mov	r3, #0
	beq	.L22
	str	r3, [r4, #24]
	str	r3, [r5, #36]
	ldr	r0, [r5, #44]
	bl	mpp_enc_deinit_frame
	mov	r3, #-1
	str	r3, [r4, #4]
	str	r3, [r5, #8]
.L20:
	movs	r0, #0
	add	sp, sp, #12
	@ sp needed
	pop	{r4, r5, pc}
.L22:
	str	r3, [r5, #24]
	str	r3, [r4, #36]
	str	r2, [r4, #8]
	str	r2, [r5, #4]
	b	.L20
.L27:
	.align	2
.L26:
	.word	.LANCHOR0+23
	.word	.LC6
	.word	.LC2
	.fnend
	.size	mpp_vcodec_chan_unbind, .-mpp_vcodec_chan_unbind
	.align	1
	.global	mpp_vcodec_chan_start
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpp_vcodec_chan_start, %function
mpp_vcodec_chan_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r4, r5, lr}
	.save {r4, r5, lr}
	.pad #12
	mov	r4, r1
	bl	mpp_vcodec_get_chan_entry
	ldr	r3, [r0, #44]
	mov	r5, r0
	cbnz	r3, .L29
	movs	r1, #202
	ldr	r3, .L35
	str	r1, [sp]
	ldr	r2, .L35+4
	ldr	r0, .L35+8
	bl	printk
.L29:
	ldr	r0, [r5, #44]
	cbz	r0, .L32
	cbz	r4, .L33
	cmp	r4, #1
	bne	.L31
	bl	mpp_enc_start
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r3, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	movs	r2, #3
	str	r2, [r5, #28]
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r3	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	bl	enc_chan_update_chan_prior_tab
.L34:
	movs	r0, #0
.L28:
	add	sp, sp, #12
	@ sp needed
	pop	{r4, r5, pc}
.L31:
	mov	r2, r4
	movs	r1, #221
	ldr	r0, .L35+12
	bl	printk
	b	.L34
.L32:
	mov	r0, #-1
	b	.L28
.L33:
	mov	r0, r4
	b	.L28
.L36:
	.align	2
.L35:
	.word	.LANCHOR0+46
	.word	.LC7
	.word	.LC2
	.word	.LC5
	.fnend
	.size	mpp_vcodec_chan_start, .-mpp_vcodec_chan_start
	.align	1
	.global	mpp_vcodec_chan_stop
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpp_vcodec_chan_stop, %function
mpp_vcodec_chan_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	.pad #8
	mov	r4, r1
	bl	mpp_vcodec_get_chan_entry
	ldr	r3, [r0, #44]
	mov	r5, r0
	cbnz	r3, .L38
	movs	r1, #233
	ldr	r3, .L44
	str	r1, [sp]
	ldr	r2, .L44+4
	ldr	r0, .L44+8
	bl	printk
.L38:
	cbz	r4, .L42
	cmp	r4, #1
	bne	.L40
	ldr	r0, [r5, #44]
	bl	mpp_enc_stop
	mov	r6, r0
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r3, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r1, [r5, #28]
	cmp	r1, #3
	beq	.L41
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r3	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
.L43:
	movs	r6, #0
	b	.L37
.L41:
	movs	r2, #2
	str	r2, [r5, #28]
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r3	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	movs	r3, #0
	mov	r2, r4
	add	r0, r5, #52
	bl	__wake_up
	bl	enc_chan_update_chan_prior_tab
.L37:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	pop	{r4, r5, r6, pc}
.L40:
	mov	r2, r4
	movs	r1, #255
	ldr	r0, .L44+12
	bl	printk
	b	.L43
.L42:
	mov	r6, r4
	b	.L37
.L45:
	.align	2
.L44:
	.word	.LANCHOR0+68
	.word	.LC7
	.word	.LC2
	.word	.LC5
	.fnend
	.size	mpp_vcodec_chan_stop, .-mpp_vcodec_chan_stop
	.align	1
	.global	mpp_vcodec_chan_destory
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpp_vcodec_chan_destory, %function
mpp_vcodec_chan_destory:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}
	.save {r4, r5, r6, r7, lr}
	.pad #44
	sub	sp, sp, #44
	mov	r6, r0
	mov	r5, r1
	bl	mpp_vcodec_get_chan_entry
	ldr	r3, [r0, #44]
	mov	r4, r0
	cmp	r3, #0
	beq	.L73
	cmp	r5, #0
	beq	.L73
	cmp	r5, #1
	bne	.L48
	ldr	r2, [r0, #8]
	movs	r1, #162
	str	r2, [sp, #8]
	ldr	r2, [r0, #4]
	str	r2, [sp, #4]
	ldrb	r2, [r0, #21]	@ zero_extendqisi2
	ldr	r0, .L84
	str	r2, [sp]
	mov	r2, r6
	bl	printk
	mov	r1, r5
	mov	r0, r6
	bl	mpp_vcodec_chan_stop
	ldrb	r3, [r4, #21]	@ zero_extendqisi2
	cbnz	r3, .L49
.L53:
	ldr	r3, [r4, #36]
	cbz	r3, .L54
	movs	r1, #0
	add	r0, sp, #20
	bl	init_wait_entry
	add	r7, r4, #60
	movs	r5, #220
.L57:
	movs	r2, #2
	add	r1, sp, #20
	mov	r0, r7
	bl	prepare_to_wait_event
	ldr	r3, [r4, #36]
	cbz	r3, .L55
	cmp	r5, #0
	bne	.L82
.L55:
	add	r1, sp, #20
	mov	r0, r7
	bl	finish_wait
	b	.L54
.L49:
	ldr	r0, [r4, #8]
	adds	r3, r0, #1
	beq	.L60
	mov	r1, r5
	bl	mpp_vcodec_get_chan_entry
	mov	r5, r0
	ldr	r0, [r0, #44]
	bl	mpp_enc_unbind_jpeg_task
.L52:
	ldr	r0, [r5, #44]
	bl	mpp_enc_check_hw_running
	cmp	r0, #0
	bne	.L53
	ldr	r0, [r5, #44]
	bl	mpp_enc_check_is_int_process
	cmp	r0, #0
	bne	.L53
.L54:
	ldrb	r3, [r4, #21]	@ zero_extendqisi2
	cbz	r3, .L58
	mov	r0, r4
	bl	mpp_vcodec_chan_unbind
.L58:
	ldr	r0, [r4, #44]
	bl	mpp_enc_deinit
	mov	r0, r4
	bl	mpp_vcodec_stream_clear
	movs	r0, #1
	bl	mpp_vcodec_dec_chan_num
	mov	r0, r4
	bl	mpp_vcodec_chan_entry_deinit
	ldr	r0, .L84+4
	mov	r2, r6
	movs	r1, #188
.L83:
	bl	printk
.L73:
	movs	r0, #0
	add	sp, sp, #44
	@ sp needed
	pop	{r4, r5, r6, r7, pc}
.L60:
	mov	r5, r4
	b	.L52
.L82:
	mov	r0, r5
	bl	schedule_timeout
	mov	r5, r0
	b	.L57
.L48:
	mov	r2, r5
	movs	r1, #191
	ldr	r0, .L84+8
	b	.L83
.L85:
	.align	2
.L84:
	.word	.LC8
	.word	.LC9
	.word	.LC5
	.fnend
	.size	mpp_vcodec_chan_destory, .-mpp_vcodec_chan_destory
	.align	1
	.global	mpp_vcodec_chan_pause
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpp_vcodec_chan_pause, %function
mpp_vcodec_chan_pause:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movs	r0, #0
	bx	lr
	.fnend
	.size	mpp_vcodec_chan_pause, .-mpp_vcodec_chan_pause
	.align	1
	.global	mpp_vcodec_chan_resume
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpp_vcodec_chan_resume, %function
mpp_vcodec_chan_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movs	r0, #0
	bx	lr
	.fnend
	.size	mpp_vcodec_chan_resume, .-mpp_vcodec_chan_resume
	.align	1
	.global	mpp_vcodec_chan_get_stream
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpp_vcodec_chan_get_stream, %function
mpp_vcodec_chan_get_stream:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, r6, r7, lr}
	.save {r3, r4, r5, r6, r7, lr}
	mov	r6, r2
	bl	mpp_vcodec_get_chan_entry
	ldr	r4, [r0, #84]
	mov	r5, r0
	cbnz	r4, .L89
	movw	r1, #281
	ldr	r0, .L93
	bl	printk
	movs	r2, #184
	mov	r1, r4
	mov	r0, r6
	bl	memset
	mov	r0, #-1
.L88:
	pop	{r3, r4, r5, r6, r7, pc}
.L89:
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r0, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	mov	r3, r5
	ldr	r4, [r3, #68]!
	cmp	r4, r3
	ite	ne
	subne	r4, r4, #12
	moveq	r4, #0
	add	r2, r4, #12
	ldrd	r1, r3, [r4, #12]
	str	r3, [r1, #4]
	str	r1, [r3]
	add	r1, r5, #76
	ldr	r3, [r5, #80]
	str	r2, [r5, #80]
	strd	r1, r3, [r4, #12]
	str	r2, [r3]
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r0	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	add	r3, r5, #84
	pld	[r3]
	.syntax unified
@ 224 "./arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.thumb
	.syntax unified
	mov	r0, r4
	movs	r7, #0
	bl	mpp_packet_get_flag
	str	r0, [r6, #40]
	mov	r0, r4
	bl	mpp_packet_get_length
	str	r0, [r6, #16]
	mov	r0, r4
	bl	mpp_packet_get_temporal_id
	str	r0, [r6, #44]
	mov	r0, r4
	bl	mpp_packet_get_pts
	strd	r0, [r6, #24]
	mov	r0, r4
	bl	mpp_packet_get_dts
	movs	r3, #1
	str	r3, [r6, #52]
	strd	r0, [r6, #32]
	ldr	r2, [r4, #76]
	ldr	r1, .L93+4
	asrs	r3, r2, #31
	strd	r2, [r6]
	ldr	r3, [r4, #84]
	strd	r4, r7, [r6, #8]
	str	r3, [r6, #48]
	ldr	r0, [r4, #72]
	bl	mpp_buffer_get_size_with_caller
	add	r3, r5, #88
	pld	[r3]
	str	r0, [r6, #20]
	.syntax unified
@ 223 "./arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.thumb
	.syntax unified
	mov	r0, r7
	b	.L88
.L94:
	.align	2
.L93:
	.word	.LC10
	.word	.LANCHOR0+89
	.fnend
	.size	mpp_vcodec_chan_get_stream, .-mpp_vcodec_chan_get_stream
	.align	1
	.global	mpp_vcodec_chan_put_stream
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpp_vcodec_chan_put_stream, %function
mpp_vcodec_chan_put_stream:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	.save {r4, r5, r6, r7, r8, r9, lr}
	.pad #12
	mov	r8, r2
	bl	mpp_vcodec_get_chan_entry
	mov	r4, r0
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r6, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	mov	r5, r0
	ldrd	r0, [r8, #8]
	ldr	r3, [r5, #76]!
	ldr	r7, [r3], #-12
	subs	r7, r7, #12
.L96:
	add	r2, r3, #12
	cmp	r2, r5
	bne	.L101
	mov	r2, r0
	mov	r3, r1
	ldr	r0, .L104
	movw	r1, #333
	bl	printk
	ldr	r2, [r4, #76]
	ldr	r7, .L104+4
	ldr	r4, [r2], #-12
	subs	r4, r4, #12
.L102:
	add	r3, r2, #12
	cmp	r5, r3
	bne	.L103
	movw	r1, #339
	ldr	r3, .L104+8
	str	r1, [sp]
	ldr	r2, .L104+12
	ldr	r0, .L104+16
	bl	printk
	b	.L100
.L101:
	mov	r9, #0
	cmp	r9, r1
	it	eq
	cmpeq	r3, r0
	bne	.L97
	ldrd	r0, r1, [r3, #12]
	str	r1, [r0, #4]
	str	r0, [r1]
	add	r0, r3, #20
	str	r2, [r3, #12]
	str	r2, [r3, #16]
	pld	[r0]
	.syntax unified
@ 224 "./arch/arm/include/asm/atomic.h" 1
	@ atomic_fetch_sub
1:	ldrex	r2, [r0]
	sub	r1, r2, #1
	strex	r5, r1, [r0]
	teq	r5, #0
	bne	1b
@ 0 "" 2
	.thumb
	.syntax unified
	cmp	r2, #1
	bne	.L98
	bl	stream_packet_free
.L99:
	add	r3, r4, #88
	pld	[r3]
	.syntax unified
@ 224 "./arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.thumb
	.syntax unified
	bl	mpp_vcodec_get_enc_module_entry
	movw	r3, #10784
	ldr	r0, [r0, r3]
	bl	vcodec_thread_trigger
.L100:
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r6	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	movs	r0, #0
	add	sp, sp, #12
	@ sp needed
	pop	{r4, r5, r6, r7, r8, r9, pc}
.L98:
	cmp	r2, #0
	bgt	.L99
	movs	r1, #3
	bl	refcount_warn_saturate
	b	.L99
.L97:
	ldr	r2, [r7, #12]
	mov	r3, r7
	sub	r7, r2, #12
	b	.L96
.L103:
	movs	r3, #0
	movw	r1, #337
	mov	r0, r7
	bl	printk
	ldr	r3, [r4, #12]
	mov	r2, r4
	sub	r4, r3, #12
	b	.L102
.L105:
	.align	2
.L104:
	.word	.LC11
	.word	.LC12
	.word	.LANCHOR0+116
	.word	.LC13
	.word	.LC2
	.fnend
	.size	mpp_vcodec_chan_put_stream, .-mpp_vcodec_chan_put_stream
	.align	1
	.global	mpp_vcodec_chan_push_frm
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpp_vcodec_chan_push_frm, %function
mpp_vcodec_chan_push_frm:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, r6, r7, r8, r9, lr}
	.save {r3, r4, r5, r6, r7, r8, r9, lr}
	mov	r9, r0
	mov	r6, r1
	bl	get_mpibuf_ops
	mov	r5, r0
	cbnz	r0, .L107
	ldr	r1, .L124
	mov	r2, #358
	ldr	r0, .L124+4
.L123:
	bl	printk
	mov	r0, #-1
.L106:
	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
.L107:
	movs	r1, #1
	mov	r0, r9
	bl	mpp_vcodec_get_chan_entry
	mov	r8, r0
	bl	mpp_vcodec_get_enc_module_entry
	movw	r3, #10784
	ldr	r7, [r0, r3]
	ldr	r3, [r5, #44]
	cbz	r3, .L110
	ldr	r0, [r6, #32]
	bl	dma_buf_get
	movs	r1, #1
	mov	r4, r0
	bl	dma_buf_end_cpu_access
	cmn	r4, #4096
	bls	.L111
	ldr	r2, [r6, #32]
	movw	r1, #371
	ldr	r0, .L124+8
	b	.L123
.L111:
	mov	r1, r6
	ldr	r3, [r5, #44]
	mov	r2, r9
	mov	r0, r4
	blx	r3
	mov	r6, r0
	mov	r0, r4
	bl	dma_buf_put
	cbz	r6, .L112
	ldr	r3, [r5, #36]
	cbnz	r3, .L113
.L122:
	movs	r0, #0
	b	.L106
.L113:
	mov	r1, r6
	ldr	r0, [r8, #48]
	blx	r3
	cmp	r0, #0
	beq	.L122
	mov	r0, r7
	bl	vcodec_thread_trigger
	b	.L122
.L112:
	cbz	r4, .L110
	mov	r0, r4
	bl	dma_buf_put
.L110:
	mov	r1, #386
	ldr	r0, .L124+12
	bl	printk
	b	.L122
.L125:
	.align	2
.L124:
	.word	.LANCHOR0+143
	.word	.LC14
	.word	.LC15
	.word	.LC16
	.fnend
	.size	mpp_vcodec_chan_push_frm, .-mpp_vcodec_chan_push_frm
	.align	1
	.global	mpp_vcodec_chan_control
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpp_vcodec_chan_control, %function
mpp_vcodec_chan_control:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, lr}
	.save {r4, r5, r6, r7, r8, r9, lr}
	.pad #36
	sub	sp, sp, #36
	mov	r8, r3
	mov	r6, r0
	mov	r4, r1
	mov	r7, r2
	bl	mpp_vcodec_get_chan_entry
	ldr	r3, [r0, #44]
	mov	r5, r0
	cbnz	r3, .L127
	mov	r1, #460
	ldr	r3, .L165
	str	r1, [sp]
	ldr	r2, .L165+4
	ldr	r0, .L165+8
	bl	printk
.L127:
	cbz	r4, .L156
	cmp	r4, #1
	bne	.L129
	ldr	r3, .L165+12
	cmp	r7, r3
	bne	.L130
	mov	r1, r4
	mov	r0, r6
	bl	mpp_vcodec_get_chan_entry
	movw	r1, #4728
	mov	r4, r0
	ldr	r0, .L165+16
	bl	mpp_osal_malloc
	mov	r5, r0
	cbnz	r0, .L131
	movw	r1, #401
	ldr	r0, .L165+20
	bl	printk
.L156:
	movs	r0, #0
	add	sp, sp, #36
	@ sp needed
	pop	{r4, r5, r6, r7, r8, r9, pc}
.L131:
	mov	r2, r0
	ldr	r1, .L165+24
	ldr	r0, [r4, #44]
	bl	mpp_enc_control
	ldr	r3, [r4, #44]
	cbnz	r3, .L132
	mov	r1, #406
	ldr	r3, .L165+16
	str	r1, [sp]
	ldr	r2, .L165+28
	ldr	r0, .L165+8
	bl	printk
.L132:
	ldr	r3, [r8, #8]
	cmp	r6, r3
	beq	.L133
	movw	r1, #407
	ldr	r3, .L165+16
	str	r1, [sp]
	ldr	r2, .L165+32
	ldr	r0, .L165+8
	bl	printk
.L133:
	movs	r1, #1
	mov	r0, r6
	bl	mpp_vcodec_chan_stop
	ldrb	r3, [r4, #21]	@ zero_extendqisi2
	cbnz	r3, .L134
.L138:
	ldr	r3, [r4, #36]
	cbz	r3, .L139
	movs	r1, #0
	add	r0, sp, #12
	bl	init_wait_entry
	add	r9, r4, #60
	movs	r7, #220
.L142:
	movs	r2, #2
	add	r1, sp, #12
	mov	r0, r9
	bl	prepare_to_wait_event
	ldr	r3, [r4, #36]
	cbz	r3, .L140
	cmp	r7, #0
	bne	.L164
.L140:
	add	r1, sp, #12
	mov	r0, r9
	bl	finish_wait
	b	.L139
.L134:
	ldr	r0, [r4, #8]
	adds	r3, r0, #1
	beq	.L145
	movs	r1, #1
	bl	mpp_vcodec_get_chan_entry
	mov	r7, r0
	ldr	r0, [r0, #44]
	bl	mpp_enc_unbind_jpeg_task
.L137:
	ldr	r0, [r7, #44]
	bl	mpp_enc_check_hw_running
	cmp	r0, #0
	bne	.L138
	ldr	r0, [r7, #44]
	bl	mpp_enc_check_is_int_process
	cmp	r0, #0
	bne	.L138
.L139:
	ldrb	r3, [r4, #21]	@ zero_extendqisi2
	cbz	r3, .L143
	mov	r0, r4
	bl	mpp_vcodec_chan_unbind
.L143:
	ldr	r0, [r4, #44]
	mov	r7, #-1
	bl	mpp_enc_deinit
	mov	r0, r4
	bl	mpp_vcodec_stream_clear
	movs	r0, #1
	bl	mpp_vcodec_dec_chan_num
	movs	r3, #0
	strd	r7, r7, [r4, #4]
	mov	r0, r8
	str	r3, [r4, #44]
	str	r3, [r4, #28]
	str	r3, [r4, #40]
	bl	mpp_vcodec_chan_create
	movs	r1, #1
	mov	r0, r6
	bl	mpp_vcodec_get_chan_entry
	add	r2, r5, #8
	ldr	r1, .L165+36
	mov	r4, r0
	ldr	r0, [r0, #44]
	bl	mpp_enc_control
	mov	r2, r5
	str	r7, [r2, #104]!
	ldr	r1, .L165+40
	ldr	r0, [r4, #44]
	bl	mpp_enc_control
	add	r2, r5, #4672
	adds	r2, r2, #8
	ldr	r1, .L165+44
	ldr	r0, [r4, #44]
	bl	mpp_enc_control
	mov	r2, r5
	ldr	r1, .L165+24
	ldr	r0, [r4, #44]
	bl	mpp_enc_control
	str	r7, [r5, #8]
	mov	r2, r5
	ldr	r1, .L165+48
	ldr	r0, [r4, #44]
	bl	mpp_enc_control
	movs	r1, #1
	mov	r0, r6
	bl	mpp_vcodec_chan_start
	mov	r1, r5
	ldr	r0, .L165+16
	bl	mpp_osal_free
	b	.L156
.L145:
	mov	r7, r4
	b	.L137
.L164:
	mov	r0, r7
	bl	schedule_timeout
	mov	r7, r0
	b	.L142
.L130:
	mov	r2, r8
	mov	r1, r7
	ldr	r0, [r5, #44]
	bl	mpp_enc_control
	b	.L156
.L129:
	mov	r2, r4
	movw	r1, #473
	ldr	r0, .L165+52
	bl	printk
	b	.L156
.L166:
	.align	2
.L165:
	.word	.LANCHOR0+168
	.word	.LC7
	.word	.LC2
	.word	3276822
	.word	.LANCHOR0+192
	.word	.LC17
	.word	3276802
	.word	.LC18
	.word	.LC19
	.word	3276803
	.word	3276805
	.word	3310081
	.word	3276801
	.word	.LC20
	.fnend
	.size	mpp_vcodec_chan_control, .-mpp_vcodec_chan_control
	.section	.rodata
	.set	.LANCHOR0,. + 0
	.type	__FUNCTION__.36357, %object
	.size	__FUNCTION__.36357, 23
__FUNCTION__.36357:
	.ascii	"mpp_vcodec_chan_create\000"
	.type	__FUNCTION__.36371, %object
	.size	__FUNCTION__.36371, 23
__FUNCTION__.36371:
	.ascii	"mpp_vcodec_chan_unbind\000"
	.type	__FUNCTION__.36427, %object
	.size	__FUNCTION__.36427, 22
__FUNCTION__.36427:
	.ascii	"mpp_vcodec_chan_start\000"
	.type	__FUNCTION__.36447, %object
	.size	__FUNCTION__.36447, 21
__FUNCTION__.36447:
	.ascii	"mpp_vcodec_chan_stop\000"
	.type	__FUNCTION__.36500, %object
	.size	__FUNCTION__.36500, 27
__FUNCTION__.36500:
	.ascii	"mpp_vcodec_chan_get_stream\000"
	.type	__FUNCTION__.36555, %object
	.size	__FUNCTION__.36555, 27
__FUNCTION__.36555:
	.ascii	"mpp_vcodec_chan_put_stream\000"
	.type	__func__.36570, %object
	.size	__func__.36570, 25
__func__.36570:
	.ascii	"mpp_vcodec_chan_push_frm\000"
	.type	__FUNCTION__.36614, %object
	.size	__FUNCTION__.36614, 24
__FUNCTION__.36614:
	.ascii	"mpp_vcodec_chan_control\000"
	.type	__FUNCTION__.36579, %object
	.size	__FUNCTION__.36579, 35
__FUNCTION__.36579:
	.ascii	"mpp_vcodec_chan_change_coding_type\000"
	.section	.rodata.str1.1,"aMS",%progbits,1
.LC0:
	.ascii	"\0016mpp_vcodec: %d: num_chan = %d\000"
.LC1:
	.ascii	"chan_entry->chan_id == chan_id\000"
.LC2:
	.ascii	"\0013mpp_vcodec: %d: Assertion %s failed at %s:%d\012"
	.ascii	"\000"
.LC3:
	.ascii	"\0016mpp_vcodec: %d: current chan %d already create"
	.ascii	"d get new chan_id %d \012\000"
.LC4:
	.ascii	"\0016mpp_vcodec: %d: create channel %d handle %p on"
	.ascii	"line %d\012\000"
.LC5:
	.ascii	"\0013mpp_vcodec: %d: create chan error type %d\012\000"
.LC6:
	.ascii	"bind_chan\000"
.LC7:
	.ascii	"chan_entry->handle != ((void *)0)\000"
.LC8:
	.ascii	"\0016mpp_vcodec: %d: destroy chan %d hnd %p online "
	.ascii	"%d combo %d mst %d\012\000"
.LC9:
	.ascii	"\0016mpp_vcodec: %d: destroy chan %d done\012\000"
.LC10:
	.ascii	"\0013mpp_vcodec: %d: no stream count found in list "
	.ascii	"\012\000"
.LC11:
	.ascii	"\0013mpp_vcodec: %d: release packet fail %llx \012\000"
.LC12:
	.ascii	"\0013mpp_vcodec: %d: dump packet out list %llx \012"
	.ascii	"\000"
.LC13:
	.ascii	"found\000"
.LC14:
	.ascii	"\0013mpp_vcodec: %s:%d: mpibuf_ops get fail\000"
.LC15:
	.ascii	"\0013mpp_vcodec: %d: dma_buf_get fd %d failed\012\000"
.LC16:
	.ascii	"\0013mpp_vcodec: %d: import dma buf to mpi buf fail"
	.ascii	" \012\000"
.LC17:
	.ascii	"\0013mpp_vcodec: %d: change_coding_type malloc fail"
	.ascii	"\000"
.LC18:
	.ascii	"entry->handle != ((void *)0)\000"
.LC19:
	.ascii	"chan_id == attr->chan_id\000"
.LC20:
	.ascii	"\0013mpp_vcodec: %d: control type %d error\012\000"
	.ident	"GCC: (crosstool-NG 1.24.0) 8.3.0"
	.section	.note.GNU-stack,"",%progbits
